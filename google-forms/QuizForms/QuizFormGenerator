{"files":[{"id":"82b661bc-a8a6-4af5-b5c0-b326c35dcf00","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Mexico_City\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"d485c705-43fd-4843-8728-3f4a392b731f","name":"QuizFormGenerator","type":"server_js","source":"function makeTrigger() {\n    ScriptApp.newTrigger(\u0027quizFormGenerator\u0027)\n        .timeBased()\n        .everyHours(1)\n        .create();\n    return;\n}\n\nfunction quizFormGenerator() {\n    var batchCount \u003d 100;\n  \n    // Generate Google Forms Quizzes from json\n    // -----------------------------------------------------------------------------------------------\n    var folders \u003d DriveApp.getFoldersByName(\u0027QuizForms\u0027);\n    var quizForms \u003d (folders.hasNext() ? folders.next() : null);\n    \n    // Get exercise renaming file\n    var renameFile \u003d quizForms.getFilesByName(\u0027new-names.json\u0027);\n    renameFile \u003d (renameFile.hasNext() ? renameFile.next() : null);\n    var content \u003d renameFile.getBlob().getDataAsString();\n    var nameMap \u003d JSON.parse(content);\n  \n    // Get exercise json files\n    folders \u003d quizForms.getFoldersByName(\u0027exercises\u0027);\n    var jsonFolder \u003d (folders.hasNext() ? folders.next() : null);\n\n    if (!jsonFolder) return;\n\n    var jsonFiles \u003d jsonFolder.getFiles();\n\n    // Get existing forms\n    folders \u003d quizForms.getFoldersByName(\u0027forms\u0027);\n    var formFolder \u003d (folders.hasNext() ? folders.next() : null);\n\n    if (!formFolder) {\n      formFolder \u003d quizForms.createFolder(\u0027forms\u0027);\n    }\n\n    var formFiles \u003d formFolder.getFiles();\n    var formNames \u003d new Set()\n    while (formFiles.hasNext()) {\n        var file \u003d formFiles.next();\n        var fileName \u003d file.getName();\n        //Logger.log(`found ${fileName}`);\n        formNames.add(fileName);\n    }\n    \n    // Generate forms if they don\u0027t exist\n    while (jsonFiles.hasNext()) {\n        var file \u003d jsonFiles.next();\n        var fileName \u003d file.getName().split(\u0027.\u0027)[0];\n        //if (formNames.has(fileName)) {\n        if (formNames.has(constructLongFormName_(fileName, nameMap))) {\n            Logger.log(`found ${fileName}`);\n        } else {\n            Logger.log(`processing ${fileName}`);\n            var quiz \u003d chapterGen_(file, nameMap);\n            moveFile_(quiz, formFolder);\n            if (--batchCount \u003d\u003d\u003d 0) break;\n        }\n    }\n\n    if (batchCount \u003d\u003d\u003d 100) {\n        deleteTriggers_();\n    }\n  \n    Logger.log(\"task complete\")\n    return;\n}\n\nfunction deleteTriggers_() {\n  var triggers \u003d ScriptApp.getProjectTriggers();\n  for (var indx \u003d 0; indx \u003c triggers.length; indx++) {\n    ScriptApp.deleteTrigger(triggers[indx]);\n  }\n}\n\nfunction constructLongFormName_(title, nameMap) {\n  // Example title: \"apbiology - Chapter 1 - The Study of Life\"\n  // Example nameMap: {\"apbiology\": \"Biology for APÂ® Courses\"}\n  \n  var splitTitle \u003d title.split(\u0027 - \u0027);\n  splitTitle[0] \u003d nameMap[splitTitle[0]];\n  return splitTitle.join(\u0027 - \u0027);\n}\n\nfunction chapterGen_(file, nameMap) {\n    if (!file) return;\n\n    var title \u003d file.getName().split(\u0027.\u0027)[0];\n    //Logger.log(title);\n    title \u003d constructLongFormName_(title, nameMap)\n\n    var content \u003d file.getBlob().getDataAsString();\n\n    var data \u003d JSON.parse(content);\n\n    // Create form\n    // -----------------------------------------------------------------------------------------------\n    var quiz \u003d FormApp.create(title);\n    quiz.setIsQuiz(true);\n\n    var opening_text \u003d \"Don\u0027t forget to wash your hands!\";\n\n    quiz.addSectionHeaderItem()\n        .setTitle(opening_text);\n\n    for (var category of data.categories) {\n\n        quiz.addPageBreakItem()\n            .setTitle(category.title);\n\n        for (var exercise of category.exercises) {\n\n            if (typeof exercise.stem \u003d\u003d\u003d \u0027undefined\u0027) continue;\n            if (exercise.stem \u003d\u003d\u003d \"\") continue;\n            var item;\n            var stem \u003d exercise.stem;\n\n            // Add image urls to stem\n            // -------------------------------------------------------------------------------------------\n            if (typeof exercise.stem_images !\u003d\u003d \u0027undefined\u0027) {\n                stem \u003d `${stem}\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ REPLACE IMAGES BELOW ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n${exercise.stem_images.join(\"\\n\")}`;\n            }\n\n\n            // Create exercise\n            // -------------------------------------------------------------------------------------------\n            if (typeof exercise.options !\u003d\u003d \u0027undefined\u0027) { // Multi-part or multiple choice\n                //Logger.log(exercise.type);\n\n                switch (exercise.type) {\n\n                    case \"m\":\n                    case \"x\":\n                        // Multiple choice / Checkbox\n                        // ---------------------------------------------------------------------------------------\n                        item \u003d quiz.addMultipleChoiceItem()\n                            .setTitle(stem)\n                            .setRequired(false)\n                            .setPoints(1);\n\n                        var options \u003d exercise.options.map((option, i) \u003d\u003e item.createChoice(\n                            `${charIndex_(i)}. ${option.option}`,\n                            answerKey_(exercise.answer, i)\n                        ));\n\n                        item.setChoices(options);\n\n                        break;\n\n                    case \"b\":\n                        // True / False\n                        // ---------------------------------------------------------------------------------------    \n                        quiz.addSectionHeaderItem()\n                            .setTitle(stem);\n\n                        exercise.options.map(option \u003d\u003e {\n                            item \u003d quiz.addMultipleChoiceItem()\n                                .setTitle(option.option)\n                                .setRequired(false)\n                                .setPoints(1);\n\n                            var options \u003d [\"True\", \"False\"].map((option) \u003d\u003e item.createChoice(\n                                option,\n                                false\n                            ));\n\n                            item.setChoices(options);\n\n                        });\n\n                        break;\n\n                    case \"p\":\n                    default:\n                        // Multi-part written response\n                        // ---------------------------------------------------------------------------------------\n                        quiz.addSectionHeaderItem()\n                            .setTitle(stem);\n\n                        exercise.options.map(option \u003d\u003e {\n                            quiz.addParagraphTextItem()\n                                .setTitle(option.option)\n                                .setRequired(false)\n                                .setPoints(1);\n                        });\n\n                        break;\n                }\n            } else {\n                // Written response\n                // -------------------------------------------------------------------------------------------\n                quiz.addParagraphTextItem()\n                    .setTitle(stem)\n                    .setRequired(false)\n                    .setPoints(1);\n            }\n\n            // Add image items\n            // -------------------------------------------------------------------------------------------\n            // if (typeof exercise.stem_images !\u003d\u003d \u0027undefined\u0027) {\n            //     var img \u003d UrlFetchApp.fetch(exercise.stem_images[0]);\n\n            //     quiz.addImageItem()\n            //         .setImage(img);\n            // }\n        }\n    }\n    return quiz;\n}\n\nfunction charIndex_(i) {\n    return String.fromCharCode(\u0027A\u0027.charCodeAt(0) + i);\n}\n\nfunction answerKey_(key, i) {\n    if (typeof key \u003d\u003d\u003d \u0027undefined\u0027) return false;\n    key \u003d key.split(\" and \")\n    //Logger.log(`${key} ${key.includes[charIndex_(i)]}`);\n    return key.includes(charIndex_(i));\n}\n\nfunction moveFile_(item, folder) {\n  var id \u003d item.getId();\n  var file \u003d DriveApp.getFileById(id);\n  file.getParents().next().removeFile(file);\n  folder.addFile(file);\n  return;\n}\n\n"}]}